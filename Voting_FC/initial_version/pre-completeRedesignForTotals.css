
  <style>
    
    .container {
      max-width: 600px;
      margin: 0 auto;
    }
    
    /* Loading Spinner */
    .loading {
      text-align: center;
      padding: 2rem;
      color: #27BEFA;
    }
    
    .spinner {
      border: 3px solid rgba(39, 190, 250, 0.3);
      border-top: 3px solid #27BEFA;
      border-radius: 50%;
      width: 40px;
      height: 40px;
      animation: spin 1s linear infinite;
      margin: 1rem auto;
    }
    
    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }
    
    /* Error Message */
    .error-message {
      background: rgba(239, 68, 68, 0.2);
      border: 1px solid #f87171;
      color: #f87171;
      padding: 1rem;
      border-radius: 8px;
      margin-bottom: 1rem;
    }
    
    /* Login Widget */
    .login-widget {
      background: rgba(11, 22, 48, 0.9);
      border: 2px solid #27BEFA;
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 1rem;
    }
    
    .login-title {
      color: #27BEFA;
      font-size: 1rem;
      margin-bottom: 0.75rem;
      text-align: center;
    }
    
    .login-form {
      display: flex;
      gap: 0.5rem;
    }
    
    .login-input {
      flex: 1;
      padding: 0.6rem;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 6px;
      color: white;
      font-size: 0.9rem;
    }
    
    .btn {
      padding: 0.6rem 1.2rem;
      background: #27BEFA;
      border: none;
      border-radius: 6px;
      color: #000;
      font-weight: bold;
      cursor: pointer;
      text-transform: uppercase;
      font-size: 0.85rem;
      white-space: nowrap;
    }
    
    .btn:hover { background: #1fa8e0; }
    .btn:disabled { opacity: 0.5; cursor: not-allowed; }
    
    .user-info {
      text-align: center;
      font-size: 0.85rem;
    }
    
    .user-email { color: #27BEFA; font-weight: bold; }
    
    .pending-verification {
      background: rgba(251, 191, 36, 0.2);
      border: 1px solid #fbbf24;
      color: #fbbf24;
      padding: 1rem;
      border-radius: 8px;
      text-align: center;
      margin-top: 0.75rem;
    }
    
    /* Voting Widget */
    .voting-widget {
      background: rgba(11, 22, 48, 0.9);
      border: 2px solid #27BEFA;
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 1rem;
    }
    
    .voting-disabled {
      text-align: center;
      padding: 2rem 1rem;
      color: #8b909b;
    }
    
    /* Tier Selector with Selections */
    .tier-selections {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 0.5rem;
      margin-bottom: 1rem;
    }
    
    .tier-card {
      background: rgba(255, 255, 255, 0.05);
      border: 2px solid rgba(255, 255, 255, 0.2);
      border-radius: 8px;
      padding: 0.6rem;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s;
      position: relative;
    }
    
    .tier-card.active {
      border-color: #27BEFA;
      background: rgba(39, 190, 250, 0.1);
    }
    
    .tier-card.voted::after {
      content: '✓';
      position: absolute;
      top: -6px;
      right: -6px;
      background: #4ade80;
      color: #000;
      width: 20px;
      height: 20px;
      border-radius: 50%;
      font-size: 0.7rem;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
    }
    
    .tier-emoji { font-size: 1.5rem; display: block; margin-bottom: 0.25rem; }
    .tier-label { font-size: 0.7rem; text-transform: uppercase; font-weight: 600; color: #8b909b; }
    .tier-selection { font-size: 0.75rem; color: white; margin-top: 0.25rem; font-weight: 600; }
    .tier-selection.empty { color: #555; font-style: italic; }
    
    /* Question */
    .question {
      text-align: center;
      font-size: 1rem;
      margin-bottom: 0.75rem;
      color: #27BEFA;
      font-weight: 600;
    }
    
    /* Horizontal Carousel */
    .carousel-container {
      position: relative;
      margin-bottom: 1rem;
    }
    
    .carousel {
      display: flex;
      overflow-x: auto;
      scroll-snap-type: x mandatory;
      gap: 1rem;
      padding: 0.5rem;
      scrollbar-width: thin;
      scrollbar-color: #27BEFA rgba(255, 255, 255, 0.1);
    }
    
    .carousel::-webkit-scrollbar { height: 6px; }
    .carousel::-webkit-scrollbar-track { background: rgba(255, 255, 255, 0.1); border-radius: 3px; }
    .carousel::-webkit-scrollbar-thumb { background: #27BEFA; border-radius: 3px; }
    
    .competitor-card {
      min-width: 140px;
      max-width: 140px;
      background: rgba(255, 255, 255, 0.05);
      border: 2px solid rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      padding: 0.75rem;
      text-align: center;
      cursor: pointer;
      scroll-snap-align: start;
      transition: all 0.3s;
      position: relative;
    }
    
    .competitor-card:hover {
      border-color: #27BEFA;
      transform: scale(1.05);
    }
    
    .competitor-card.selected {
      border-color: #4ade80;
      background: rgba(74, 222, 128, 0.15);
      box-shadow: 0 0 15px rgba(74, 222, 128, 0.3);
    }
    
    .competitor-card.selected::after {
      content: '✓';
      position: absolute;
      top: 6px;
      right: 6px;
      background: #4ade80;
      color: #000;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      font-size: 1rem;
      font-weight: bold;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .placement {
      position: absolute;
      top: 6px;
      left: 6px;
      background: #27BEFA;
      color: #000;
      width: 24px;
      height: 24px;
      border-radius: 50%;
      font-weight: bold;
      font-size: 0.9rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .competitor-image {
      width: 100%;
      height: 160px;
      background: rgba(0, 0, 0, 0.3);
      border-radius: 6px;
      margin-bottom: 0.5rem;
      overflow: hidden;
    }
    
    .competitor-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }
    
    .competitor-name {
      color: #27BEFA;
      font-weight: bold;
      font-size: 0.75rem;
      margin-bottom: 0.25rem;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }
    
    .competitor-score {
      font-size: 1.2rem;
      font-weight: bold;
    }
    
    /* Submit Button */
    .submit-section {
      text-align: center;
    }
    
    .btn-large {
      width: 100%;
      padding: 1rem;
      font-size: 1rem;
      background: linear-gradient(135deg, #27BEFA, #4ade80);
      border: none;
      border-radius: 8px;
      color: white;
      font-weight: bold;
      cursor: pointer;
      text-transform: uppercase;
    }
    
    .btn-large:hover:not(:disabled) { transform: scale(1.02); }
    .btn-large:disabled {
      opacity: 0.5;
      cursor: not-allowed;
      background: #333;
    }
    
    .btn-voted {
      background: linear-gradient(135deg, #4ade80, #22c55e);
      cursor: default;
    }
    
    /* Results Widget */
    .results-widget {
      background: rgba(11, 22, 48, 0.9);
      border: 2px solid #4ade80;
      border-radius: 8px;
      padding: 1.5rem;
      margin-bottom: 1rem;
      display: none;
    }
    
    .results-widget.show { display: block; }
    
    .results-title {
      color: #4ade80;
      font-size: 1.2rem;
      text-align: center;
      margin-bottom: 1rem;
      font-weight: bold;
    }
    
    .results-grid {
      display: grid;
      gap: 0.75rem;
      margin-bottom: 1.5rem;
    }
    
    .result-tier {
      background: rgba(255, 255, 255, 0.05);
      border-radius: 6px;
      padding: 1rem;
    }
    
    .result-tier-name {
      color: #27BEFA;
      font-weight: bold;
      margin-bottom: 0.5rem;
      text-transform: uppercase;
      font-size: 0.85rem;
    }
    
    .result-standings {
      display: flex;
      justify-content: space-around;
      margin-top: 0.5rem;
    }
    
    .standing-item {
      text-align: center;
    }
    
    .standing-place {
      color: #8b909b;
      font-size: 0.7rem;
    }
    
    .standing-votes {
      color: white;
      font-weight: bold;
      font-size: 1.1rem;
    }
    
    .results-cta {
      background: rgba(39, 190, 250, 0.1);
      border: 1px solid #27BEFA;
      border-radius: 6px;
      padding: 1rem;
      text-align: center;
      margin-top: 1rem;
    }
    
    .results-cta-title {
      color: #27BEFA;
      font-weight: bold;
      margin-bottom: 0.5rem;
    }
    
    .results-cta-text {
      color: #8b909b;
      font-size: 0.85rem;
      margin-bottom: 0.75rem;
    }
    
    .results-cta-link {
      display: inline-block;
      padding: 0.6rem 1.5rem;
      background: #27BEFA;
      color: #000;
      text-decoration: none;
      border-radius: 6px;
      font-weight: bold;
      margin-top: 0.5rem;
    }
    
    /* Overlay */
    .overlay {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: rgba(0, 0, 0, 0.9);
      display: none;
      align-items: center;
      justify-content: center;
      z-index: 1000;
      padding: 20px;
    }
    
    .overlay.show { display: flex; }
    
    /* Confirmation Modal */
    .confirm-modal {
      background: linear-gradient(135deg, #0b1630, #162444);
      border: 3px solid #27BEFA;
      border-radius: 16px;
      padding: 2rem;
      text-align: center;
      max-width: 400px;
      width: 100%;
    }
    
    .confirm-title {
      color: #27BEFA;
      font-size: 1.3rem;
      margin-bottom: 1rem;
      font-weight: bold;
    }
    
    .confirm-selections {
      background: rgba(0, 0, 0, 0.3);
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 1.5rem;
    }
    
    .confirm-item {
      display: flex;
      justify-content: space-between;
      padding: 0.5rem 0;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .confirm-item:last-child { border-bottom: none; }
    
    .confirm-tier { color: #8b909b; font-size: 0.85rem; }
    .confirm-name { color: white; font-weight: bold; }
    
    .confirm-buttons {
      display: flex;
      gap: 0.75rem;
    }
    
    .btn-secondary {
      flex: 1;
      padding: 0.75rem;
      background: transparent;
      border: 1px solid rgba(255, 255, 255, 0.3);
      border-radius: 6px;
      color: white;
      cursor: pointer;
      font-weight: bold;
    }
    
    /* RNG Modal */
    .rng-modal {
      background: linear-gradient(135deg, #0b1630, #162444);
      border: 3px solid #27BEFA;
      border-radius: 16px;
      padding: 2.5rem;
      text-align: center;
      max-width: 400px;
      width: 100%;
    }
    
    .rng-title {
      color: #27BEFA;
      font-size: 1.3rem;
      margin-bottom: 1rem;
      text-transform: uppercase;
      font-weight: bold;
    }
    
    .rng-display {
      font-size: 5rem;
      font-weight: bold;
      color: #4ade80;
      margin: 1.5rem 0;
      text-shadow: 0 0 30px rgba(74, 222, 128, 0.5);
      min-height: 100px;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    
    .rng-display.spinning { animation: spin-scale 0.1s infinite; }
    
    @keyframes spin-scale {
      0%, 100% { transform: scale(1); }
      50% { transform: scale(1.1); }
    }
    
    .rng-subtitle {
      color: #8b909b;
      font-size: 0.9rem;
    }
    
    /* Multiplier Result Modal */
    .multiplier-result-modal {
      background: linear-gradient(135deg, #0b1630, #162444);
      border: 3px solid #4ade80;
      border-radius: 16px;
      padding: 2.5rem;
      text-align: center;
      max-width: 400px;
      width: 100%;
    }
    
    .multiplier-result-title {
      color: #4ade80;
      font-size: 1.5rem;
      margin-bottom: 1rem;
      font-weight: bold;
    }
    
    .multiplier-result-value {
      font-size: 4rem;
      font-weight: bold;
      color: #4ade80;
      margin: 1.5rem 0;
      text-shadow: 0 0 30px rgba(74, 222, 128, 0.5);
    }
    
    .multiplier-result-text {
      color: #8b909b;
      font-size: 1rem;
      margin-bottom: 2rem;
    }
    
    /* Coupon Modal */
    .coupon-modal {
      background: linear-gradient(135deg, #0b1630, #162444);
      border: 3px solid #4ade80;
      border-radius: 16px;
      padding: 2rem;
      text-align: center;
      max-width: 400px;
      width: 100%;
    }
    
    .coupon-title {
      color: #4ade80;
      font-size: 1.5rem;
      margin-bottom: 1rem;
      font-weight: bold;
    }
    
    .coupon-text {
      color: #8b909b;
      margin-bottom: 1rem;
    }
    
    .coupon-input {
      width: 100%;
      padding: 0.75rem;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid rgba(255, 255, 255, 0.2);
      border-radius: 6px;
      color: white;
      font-size: 0.9rem;
      margin-bottom: 1rem;
    }
    
    .coupon-buttons {
      display: flex;
      gap: 0.75rem;
    }
    
    /* Thanks Modal */
    .thanks-modal {
      background: linear-gradient(135deg, #0b1630, #162444);
      border: 3px solid #27BEFA;
      border-radius: 16px;
      padding: 2.5rem;
      text-align: center;
      max-width: 400px;
      width: 100%;
    }
    
    .thanks-title {
      color: #27BEFA;
      font-size: 1.5rem;
      margin-bottom: 1rem;
      font-weight: bold;
    }
    
    .thanks-text {
      color: #8b909b;
      font-size: 1rem;
      margin-bottom: 1.5rem;
    }
    
    /* Timezone Modal */
    .timezone-modal {
      background: linear-gradient(135deg, #0b1630, #162444);
      border: 3px solid #27BEFA;
      border-radius: 16px;
      padding: 2rem;
      max-width: 400px;
      width: 100%;
    }
    
    .timezone-title {
      color: #27BEFA;
      font-size: 1.3rem;
      text-align: center;
      margin-bottom: 1.5rem;
      font-weight: bold;
    }
    
    .timezone-info {
      background: rgba(0, 0, 0, 0.3);
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 1rem;
    }
    
    .timezone-row {
      display: flex;
      justify-content: space-between;
      padding: 0.75rem 0;
      border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .timezone-row:last-child { border-bottom: none; }
    
    .timezone-label {
      color: #8b909b;
      font-size: 0.85rem;
    }
    
    .timezone-value {
      color: white;
      font-weight: bold;
    }
    
    .timezone-close {
      width: 100%;
      padding: 0.75rem;
      background: #27BEFA;
      border: none;
      border-radius: 6px;
      color: #000;
      font-weight: bold;
      cursor: pointer;
    }
    
    @media (max-width: 400px) {
      .competitor-card {
        min-width: 120px;
        max-width: 120px;
      }
      
      .competitor-image { height: 140px; }
    }
  </style>



  <div class="container">
    <!-- Login Widget -->
    <div id="login-widget" class="login-widget"></div>
    
    <!-- Voting Widget -->
    <div id="voting-widget" class="voting-widget"></div>
    
    <!-- Results Widget -->
    <div id="results-widget" class="results-widget"></div>
    
    <!-- Overlay for modals -->
    <div id="overlay" class="overlay"></div>
  </div>

  <script>
    // ============================================
    // CONFIGURATION
    // ============================================
const CONFIG = {
  DEV_MODE: true, // Set to true for testing
  
  // GAS Endpoints (UPDATE THESE AFTER DEPLOYMENT)
  LEADERBOARD_URL: 'https://script.google.com/macros/s/AKfycbzgvbWWjQNPdUTJeGmq0-790Vm7enUQvHW2B3Dy6wYre3jp98gQdpNMcTm3YXvGnLXW7Q/exec',
  AUTH_URL: 'https://script.google.com/macros/s/AKfycbwNEjXJXEzIBzXsUsbr1oVHs5bQUhvBI1Ix8X1CeC6HzsEFrwvg-3nmlcijh0G1der4rQ/exec',
  VOTING_URL: 'https://script.google.com/macros/s/AKfycbx5U-4P7Mhb7NLhilr5KTx6tq7PWFBoN5Ql4mPf8ZGg9QoKnr-8DomlgQflS_HRsBEU/exec',
  
  // LocalStorage Keys
  CACHE_KEY: 'fc_lb_cache_v1',
  AUTH_KEY: 'fc_user_auth',
  TIER_KEY: 'fc_tier_selection',
  
  // Cache expiry (24 hours)
  CACHE_EXPIRY: 24 * 60 * 60 * 1000
};
    
    // ============================================
    // STATE MANAGEMENT
    // ============================================
    const STATE = {
      user: null,
      currentTier: 'top',
      selections: { top: null, mid: null, low: null },
      competitors: { top: [], mid: [], low: [] },
      voteMultiplier: null,
      hasVoted: false,
      loading: false,
      leaderboardData: null
    };
    
    // ============================================
    // UTILITY FUNCTIONS
    // ============================================
    function log(...args) {
      if (CONFIG.DEV_MODE) {
        console.log('[FlexCheck]', ...args);
      }
    }
    
    function showError(message) {
      const widget = document.getElementById('voting-widget');
      widget.innerHTML = `<div class="error-message">❌ ${message}</div>`;
    }
    
    function showLoading(element, message = 'Loading...') {
      element.innerHTML = `
        <div class="loading">
          <div class="spinner"></div>
          <p>${message}</p>
        </div>
      `;
    }
    
    function getFirstPhoto(photosStr) {
      try {
        const photos = JSON.parse(photosStr);
        return photos[0] || 'https://placehold.co/300x400?text=No+Photo';
      } catch {
        return 'https://placehold.co/300x400?text=No+Photo';
      }
    }
    
    function isVotingOpen() {
      if (CONFIG.DEV_MODE) return true;
      
      const now = new Date();
      const day = now.getDay();
      const hour = now.getHours();
      
      // Thursday 7pm or later
      const isThursdayEvening = day === 4 && hour >= 19;
      // Friday before 7pm
      const isFridayDay = day === 5 && hour < 19;
      
      return isThursdayEvening || isFridayDay;
    }
    
    // ============================================
    // LOCAL STORAGE HELPERS
    // ============================================
    function saveToCache(key, data) {
      try {
        const cacheData = {
          data: data,
          timestamp: Date.now()
        };
        localStorage.setItem(key, JSON.stringify(cacheData));
        log('Saved to cache:', key);
      } catch (e) {
        console.error('Failed to save to cache:', e);
      }
    }
    
    function loadFromCache(key) {
      try {
        const cached = localStorage.getItem(key);
        if (!cached) return null;
        
        const { data, timestamp } = JSON.parse(cached);
        
        // Check if cache is expired
        if (Date.now() - timestamp > CONFIG.CACHE_EXPIRY) {
          localStorage.removeItem(key);
          log('Cache expired:', key);
          return null;
        }
        
        log('Loaded from cache:', key);
        return data;
      } catch (e) {
        console.error('Failed to load from cache:', e);
        return null;
      }
    }
    
    function saveAuth(user) {
      try {
        localStorage.setItem(CONFIG.AUTH_KEY, JSON.stringify(user));
        log('Auth saved');
      } catch (e) {
        console.error('Failed to save auth:', e);
      }
    }
    
    function loadAuth() {
      try {
        const auth = localStorage.getItem(CONFIG.AUTH_KEY);
        return auth ? JSON.parse(auth) : null;
      } catch (e) {
        console.error('Failed to load auth:', e);
        return null;
      }
    }
    
    function clearAuth() {
      localStorage.removeItem(CONFIG.AUTH_KEY);
      log('Auth cleared');
    }
    
    // ============================================
    // API CALLS
    // ============================================
    async function fetchLeaderboard() {
      log('Fetching leaderboard...');
      
      try {
        const response = await fetch(CONFIG.LEADERBOARD_URL);
        if (!response.ok) throw new Error('Failed to fetch leaderboard');
        
        const data = await response.json();
        log('Leaderboard data:', data);
        
        // Save to cache
        saveToCache(CONFIG.CACHE_KEY, data);
        
        return data;
      } catch (error) {
        console.error('Leaderboard fetch error:', error);
        
        // Try to use cached data
        const cached = loadFromCache(CONFIG.CACHE_KEY);
        if (cached) {
          log('Using cached leaderboard data');
          return cached;
        }
        
        throw error;
      }
    }
    
async function authenticateEmail(email) {
  log('Authenticating email:', email);
  try {
    const url = `${CONFIG.AUTH_URL}?action=authenticateEmail&email=${encodeURIComponent(email)}`;
    const response = await fetch(url, { method: 'GET' });
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    const result = await response.json();
    log('Auth response:', result);
    return result;
  } catch (error) {
    console.error('Auth error:', error);
    throw error;
  }
}

async function submitVotes(email, votes) {
  log('Submitting votes:', { email, votes });
  try {
    const params = new URLSearchParams({
      action: 'batchVote',
      email: email,
      topEntryId: votes.top.entryId,
      topPoints: votes.top.rngPoints,
      midEntryId: votes.mid.entryId,
      midPoints: votes.mid.rngPoints,
      lowEntryId: votes.low.entryId,
      lowPoints: votes.low.rngPoints,
      devOverride: CONFIG.DEV_MODE
    });
    const url = `${CONFIG.VOTING_URL}?${params.toString()}`;
    const response = await fetch(url, { method: 'GET' });
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    const result = await response.json();
    log('Vote response:', result);
    return result;
  } catch (error) {
    console.error('Vote submission error:', error);
    throw error;
  }
}

async function fetchVoteTotals(weekKey) {
  log('Fetching vote totals...');
  try {
    const params = new URLSearchParams({ action: 'getVoteTotals' });
    if (weekKey) params.append('weekKey', weekKey);
    const url = `${CONFIG.VOTING_URL}?${params.toString()}`;
    const response = await fetch(url, { method: 'GET' });
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    const result = await response.json();
    log('Vote totals:', result);
    return result;
  } catch (error) {
    console.error('Vote totals error:', error);
    throw error;
  }
}

async function verifyEmailToken(token) {
  log('Verifying email token:', token);
  try {
    const url = `${CONFIG.AUTH_URL}?action=verifyEmail&token=${encodeURIComponent(token)}`;
    const response = await fetch(url, { method: 'GET' });
    if (!response.ok) throw new Error(`HTTP ${response.status}`);
    const result = await response.json();
    log('Verification response:', result);
    return result;
  } catch (error) {
    console.error('Verification error:', error);
    throw error;
  }
}
    
    // ============================================
    // RENDER FUNCTIONS
    // ============================================
    function renderLogin() {
      const widget = document.getElementById('login-widget');
      
      if (STATE.user) {
        widget.innerHTML = `
          <div class="user-info">
            <div style="color: #8b909b;">Signed in as: <span class="user-email">${STATE.user.email}</span></div>
            ${CONFIG.DEV_MODE && STATE.leaderboardData ? `
              <div style="color: #555; font-size: 0.75rem; margin-top: 0.5rem;">
                DEV: Week ${STATE.leaderboardData.weekKey} | Voting ${STATE.leaderboardData.updating ? 'OPEN' : 'CLOSED'}
              </div>
            ` : ''}
          </div>
        `;
      } else {
        widget.innerHTML = `
          <h3 class="login-title">FlexCheck Voting - Sign In</h3>
          <div class="login-form">
            <input type="email" id="email-input" class="login-input" placeholder="your@email.com">
            <button class="btn" onclick="handleLogin()">Sign In</button>
          </div>
          <div id="login-message"></div>
          ${CONFIG.DEV_MODE ? `
            <div style="color: #555; font-size: 0.75rem; text-align: center; margin-top: 0.5rem;">
              DEV MODE ACTIVE - Voting always open
            </div>
          ` : ''}
        `;
      }
    }
    
function renderVoting() {
      const widget = document.getElementById('voting-widget');
      
      if (!STATE.user) {
        widget.innerHTML = '<div class="voting-disabled">🔒 Sign in to vote</div>';
        return;
      }
      
      if (!STATE.user.verified) {
  widget.innerHTML = `
    <div class="voting-disabled">
      <p style="margin-bottom: 1rem;">⏳ Email Verification Required</p>
      <p style="color: #8b909b; font-size: 0.9rem; margin-bottom: 1rem;">
        Please check your email and click the verification link to start voting.
      </p>
      <button class="btn" style="padding: 0.5rem 1rem; font-size: 0.85rem;" onclick="refreshUserStatus()">
        Refresh Verification Status
      </button>
    </div>
  `;
  return;
}
      
      if (!isVotingOpen()) {
        widget.innerHTML = '<div class="voting-disabled">⏰ Voting opens Thursday 7pm CT</div>';
        return;
      }
      
      // Check if user has already voted in all tiers
      const hasVotedAll = STATE.user.voted_top && STATE.user.voted_mid && STATE.user.voted_low;
      
      if (hasVotedAll) {
        widget.innerHTML = `
          <div class="voting-disabled">
            <p style="margin-bottom: 1rem;">✅ You've Already Voted!</p>
            <p style="color: #8b909b; font-size: 0.9rem; margin-bottom: 1rem;">
              Thanks for participating! Check out the current standings below.
            </p>
            <button class="btn" style="padding: 0.5rem 1rem; font-size: 0.85rem;" onclick="scrollToResults()">
              View Results
            </button>
          </div>
        `;
        // Automatically show and refresh results
        renderResults();
        document.getElementById('results-widget').classList.add('show');
        return;
      }
      
      if (STATE.competitors.top.length === 0) {
        showLoading(widget, 'Loading competitors...');
        return;
      }
      
      const competitors = STATE.competitors[STATE.currentTier];
      const tierLabel = STATE.currentTier === 'top' ? 'Top' : STATE.currentTier === 'mid' ? 'Mid' : 'Bot';
      const hasVoted = STATE.user[`voted_${STATE.currentTier}`] || false;
      
      widget.innerHTML = `
        <div class="tier-selections">
          ${['top', 'mid', 'low'].map(tier => {
            const emoji = tier === 'top' ? '🔥' : tier === 'mid' ? '📈' : '💀';
            const label = tier === 'top' ? 'Top' : tier === 'mid' ? 'Mid' : 'Bot';
            const selected = STATE.selections[tier];
            const selectionName = selected ? 
              STATE.competitors[tier].find(c => c.entryId === selected)?.socialHandle : 
              'Not selected';
            
            return `
              <div class="tier-card ${STATE.currentTier === tier ? 'active' : ''} ${STATE.user[`voted_${tier}`] ? 'voted' : ''}" 
                   onclick="changeTier('${tier}')">
                <span class="tier-emoji">${emoji}</span>
                <div class="tier-label">${label} Tier</div>
                <div class="tier-selection ${!selected ? 'empty' : ''}">${selectionName}</div>
              </div>
            `;
          }).join('')}
        </div>
        
        <div class="question">Who advances to semifinals?</div>
        
        <div class="carousel-container">
          <div class="carousel">
            ${competitors.slice(0, 3).map((comp, idx) => `
              <div class="competitor-card ${STATE.selections[STATE.currentTier] === comp.entryId ? 'selected' : ''}" 
                   onclick="${hasVoted ? '' : `selectCompetitor(${comp.entryId})`}">
                <div class="placement">${idx + 1}</div>
                <div class="competitor-image">
                  <img src="${getFirstPhoto(comp.photos)}" alt="${comp.socialHandle}">
                </div>
                <div class="competitor-name">${comp.socialHandle}</div>
                <div class="competitor-score">${comp.score.toFixed(1)}</div>
              </div>
            `).join('')}
          </div>
        </div>
        
        <div class="submit-section">
          ${STATE.hasVoted ? `
            <button class="btn-large btn-voted" disabled>
              ✓ Vote Cast - Multiplier: ${STATE.voteMultiplier}x
            </button>
          ` : `
            <button class="btn-large" 
                    ${!STATE.selections.top || !STATE.selections.mid || !STATE.selections.low ? 'disabled' : ''}
                    onclick="showConfirmation()">
              ${STATE.selections.top && STATE.selections.mid && STATE.selections.low ? 
                'Confirm Vote' : 'Select one from each tier'}
            </button>
          `}
        </div>
      `;
    }
    
    // ============================================
// FIXED RESULTS RENDERING
// ============================================

function renderResults() {
  const widget = document.getElementById('results-widget');
  
  // ✅ FIX #1: Always show the widget and add loading state
  widget.classList.add('show');
  showLoading(widget, 'Loading vote results...');
  
  // ✅ FIX #2: Use current week key if leaderboard data not available
  const weekKey = (STATE.leaderboardData && STATE.leaderboardData.weekKey) 
    ? STATE.leaderboardData.weekKey 
    : null; // Let backend use current week
  
  log('Fetching vote totals for week:', weekKey || 'current');
  
  // ✅ FIX #3: Add detailed logging
  fetchVoteTotals(weekKey)
    .then(result => {
      log('Vote totals response:', result);
      
      if (result.success && result.totals) {
        log('Totals structure:', {
          top: result.totals.top?.length || 0,
          mid: result.totals.mid?.length || 0,
          low: result.totals.low?.length || 0
        });
        displayResults(result.totals);
      } else {
        log('No vote data yet, showing placeholder');
        displayResults({ top: [], mid: [], low: [] });
      }
    })
    .catch(error => {
      console.error('Error fetching vote totals:', error);
      log('Error fetching totals, showing placeholder');
      displayResults({ top: [], mid: [], low: [] });
    });
  
  // ✅ Nested function with better error handling
  function displayResults(totals) {
    log('Displaying results with totals:', totals);
    
    // Validate totals structure
    if (!totals || typeof totals !== 'object') {
      log('Invalid totals structure, using empty arrays');
      totals = { top: [], mid: [], low: [] };
    }
    
    widget.innerHTML = `
      <h2 class="results-title">Current Vote Standings</h2>
      
      <div class="results-grid">
        ${['top', 'mid', 'low'].map(tier => {
          const label = tier === 'top' ? 'Top' : tier === 'mid' ? 'Mid' : 'Bot';
          const tierTotals = totals[tier] || [];
          
          log(`Rendering ${tier} tier with ${tierTotals.length} entries`);
          
          // Backend already sorted and ranked - just take top 3
          const top3 = tierTotals.slice(0, 3);
          
          // Pad with zeros if less than 3
          while (top3.length < 3) {
            top3.push({ totalPoints: 0, competitorName: 'TBA' });
          }
          
          return `
            <div class="result-tier">
              <div class="result-tier-name">${label} Tier</div>
              <div class="result-standings">
                ${top3.map((entry, idx) => {
                  // Try to get competitor name
                  let competitorName = entry.competitorName || '';
                  
                  // Fallback: lookup from leaderboard competitors
                  if (!competitorName && entry.entryId && STATE.competitors[tier]) {
                    const comp = STATE.competitors[tier].find(c => String(c.entryId) === String(entry.entryId));
                    if (comp) {
                      competitorName = comp.socialHandle;
                    }
                  }
                  
                  log(`  ${idx + 1}. ${competitorName}: ${entry.totalPoints || 0} points`);
                  
                  return `
                    <div class="standing-item">
                      <div class="standing-place">${idx + 1}${idx === 0 ? 'st' : idx === 1 ? 'nd' : 'rd'}</div>
                      <div class="standing-votes">${entry.totalPoints || 0}</div>
                      ${competitorName ? `<div style="font-size: 0.65rem; color: #8b909b; margin-top: 0.25rem;">${competitorName}</div>` : ''}
                    </div>
                  `;
                }).join('')}
              </div>
            </div>
          `;
        }).join('')}
      </div>
      
      <div style="text-align: center; color: #8b909b; font-size: 1rem; margin: 1.5rem 0; padding: 1rem; background: rgba(0,0,0,0.3); border-radius: 8px;">
        <strong style="color: #27BEFA;">Can't tell who is winning?</strong><br>
        The only way to find out is to watch it LIVE!
      </div>
      
      <div class="results-cta">
        <div class="results-cta-title">🎥 Watch the Live Results!</div>
        <div class="results-cta-text">
          Join us Friday at <span style="color: #27BEFA; cursor: pointer; text-decoration: underline;" onclick="showTimezoneConverter()">7pm CT</span> on Instagram with @chase_ribordy for the live semifinalist announcement!
        </div>
        <a href="https://instagram.com/chase_ribordy" target="_blank" class="results-cta-link">
          Follow on Instagram
        </a>
      </div>
      
      <div class="results-cta" style="margin-top: 1rem;">
        <div class="results-cta-title">💬 Can't Watch Live?</div>
        <div class="results-cta-text">
          Join the community and get updates on who is winning the FlexCheck Championship!
        </div>
        <a href="https://discord.gg/flexcheck" target="_blank" class="results-cta-link">
          Join Discord
        </a>
      </div>
    `;
    
    log('Results rendering complete');
  }
}
    
    // ============================================
    // USER ACTIONS
    // ============================================
window.handleLogin = async function() {
  const emailInput = document.getElementById('email-input');
  const email = emailInput.value.trim().toLowerCase();
  const messageEl = document.getElementById('login-message');
  
  if (!email) {
    messageEl.innerHTML = '<div class="error-message">Please enter your email</div>';
    return;
  }
  
  if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
    messageEl.innerHTML = '<div class="error-message">Please enter a valid email</div>';
    return;
  }
  
  emailInput.disabled = true;
  messageEl.innerHTML = '<div class="loading"><div class="spinner"></div><p>Authenticating...</p></div>';
  
  try {
    const result = await authenticateEmail(email);
    
    if (result.success) {
      // Always update the user state with fresh data from server
      STATE.user = result.voter;
      saveAuth(result.voter);
      
      if (result.voter.verified) {
        // User is verified - proceed to voting
        log('User verified, proceeding to voting');
        renderLogin();
        renderVoting();
        messageEl.innerHTML = '';
      } else {
        // User needs verification
        log('User not verified, showing verification message');
        
        let message = `
          <div class="pending-verification">
            ⏳ Please check your email to verify your account<br>
            <small style="color: #8b909b; margin-top: 0.5rem; display: block;">
              Check spam folder if not received
            </small>
        `;
        
        // Show warning if email failed
        if (result.emailSent === false) {
          message += `
            <div style="margin-top: 0.75rem; padding: 0.5rem; background: rgba(239, 68, 68, 0.2); border-radius: 6px;">
              ⚠️ Email delivery issue detected<br>
              <small style="font-size: 0.75rem;">
                Error: ${result.emailError || 'Unknown'}
              </small>
            </div>
          `;
        }
        
        message += '</div>';
        messageEl.innerHTML = message;
        
        renderLogin();
        renderVoting();
      }
    } else {
      messageEl.innerHTML = `<div class="error-message">${result.message}</div>`;
    }
  } catch (error) {
    log('Login error:', error);
    messageEl.innerHTML = '<div class="error-message">Connection error. Please try again.</div>';
  } finally {
    emailInput.disabled = false;
  }
};
    
    window.changeTier = function(tier) {
      STATE.currentTier = tier;
      localStorage.setItem(CONFIG.TIER_KEY, tier);
      renderVoting();
    };
    
    window.selectCompetitor = function(entryId) {
      STATE.selections[STATE.currentTier] = entryId;
      renderVoting();
    };
    
    window.showConfirmation = function() {
      const overlay = document.getElementById('overlay');
      
      overlay.innerHTML = `
        <div class="confirm-modal">
          <div class="confirm-title">Confirm Your Votes</div>
          <div class="confirm-selections">
            ${['top', 'mid', 'low'].map(tier => {
              const label = tier === 'top' ? 'Top' : tier === 'mid' ? 'Mid' : 'Bot';
              const competitor = STATE.competitors[tier].find(c => c.entryId === STATE.selections[tier]);
              return `
                <div class="confirm-item">
                  <span class="confirm-tier">${label} Tier:</span>
                  <span class="confirm-name">${competitor.socialHandle}</span>
                </div>
              `;
            }).join('')}
          </div>
          <p style="color: #8b909b; margin-bottom: 1rem; font-size: 0.9rem;">
            Ready to generate your vote multiplier?
          </p>
          <div class="confirm-buttons">
            <button class="btn-secondary" onclick="closeOverlay()">Cancel</button>
            <button class="btn" style="flex: 1;" onclick="showRNG()">Let's Go!</button>
          </div>
        </div>
      `;
      overlay.classList.add('show');
    };
    
    window.showRNG = function() {
      const overlay = document.getElementById('overlay');
      let currentNumber = 1;
      let iterations = 0;
      const maxIterations = 30;
      
      overlay.innerHTML = `
        <div class="rng-modal">
          <div class="rng-title">Vote Multiplier</div>
          <div class="rng-display spinning" id="rng-display">1</div>
          <div class="rng-subtitle">Generating your multiplier...</div>
        </div>
      `;
      
      const interval = setInterval(() => {
        currentNumber = Math.floor(Math.random() * 100) + 1;
        document.getElementById('rng-display').textContent = currentNumber;
        iterations++;
        
        if (iterations >= maxIterations) {
          clearInterval(interval);
          
          const finalNumber = Math.floor(Math.random() * 100) + 1;
          const display = document.getElementById('rng-display');
          display.textContent = finalNumber;
          display.classList.remove('spinning');
          
          STATE.voteMultiplier = finalNumber;
          
          setTimeout(() => {
            showMultiplierResult(finalNumber);
          }, 1500);
        }
      }, 100);
    };
    
    function showMultiplierResult(multiplier) {
      const overlay = document.getElementById('overlay');
      
      overlay.innerHTML = `
        <div class="multiplier-result-modal">
          <div class="multiplier-result-title">🎉 Your Vote Counted For</div>
          <div class="multiplier-result-value">${multiplier}x</div>
          <div class="multiplier-result-text">
            Your selections received <strong style="color: #4ade80;">${multiplier} points</strong> each!
          </div>
          <button class="btn" style="width: 100%; padding: 1rem;" onclick="submitVotesAndShowCoupon()">
            Next
          </button>
        </div>
      `;
    }
   window.refreshUserStatus = async function() {
  if (!STATE.user || !STATE.user.email) {
    log('No user to refresh');
    return;
  }
  
  log('Refreshing user status...');
  const widget = document.getElementById('voting-widget');
  showLoading(widget, 'Checking verification status...');
  
  try {
    const result = await authenticateEmail(STATE.user.email);
    
    if (result.success) {
      // Update user state
      STATE.user = result.voter;
      saveAuth(result.voter);
      
      log('User status refreshed:', result.voter);
      
      // Re-render everything
      renderLogin();
      renderVoting();
      
      if (result.voter.verified) {
        // Show success message
        const successMsg = document.createElement('div');
        successMsg.style.cssText = 'position: fixed; top: 20px; left: 50%; transform: translateX(-50%); background: rgba(74, 222, 128, 0.9); color: white; padding: 1rem 2rem; border-radius: 8px; z-index: 9999; font-weight: bold;';
        successMsg.textContent = '✅ Verification confirmed!';
        document.body.appendChild(successMsg);
        
        setTimeout(() => {
          successMsg.remove();
        }, 3000);
      }
    } else {
      showError('Failed to refresh status. Please try again.');
    }
  } catch (error) {
    log('Refresh error:', error);
    showError('Connection error. Please try again.');
  }
}; 
    window.submitVotesAndShowCoupon = async function() {
  const overlay = document.getElementById('overlay');
  
  // Show loading
  overlay.innerHTML = `
    <div class="rng-modal">
      <div class="loading">
        <div class="spinner"></div>
        <p>Submitting your votes...</p>
      </div>
    </div>
  `;
  
  try {
    // Prepare vote data
    const votes = {
      top: {
        entryId: STATE.selections.top,
        rngPoints: STATE.voteMultiplier
      },
      mid: {
        entryId: STATE.selections.mid,
        rngPoints: STATE.voteMultiplier
      },
      low: {
        entryId: STATE.selections.low,
        rngPoints: STATE.voteMultiplier
      }
    };
    
    log('Submitting votes:', votes);
    const result = await submitVotes(STATE.user.email, votes);
    log('Vote result:', result);
    
    if (result.success) {
      // ✅ NEW: Use the voter profile returned in the response
      if (result.voter) {
        log('Updating user with returned profile:', result.voter);
        STATE.user = result.voter;
        saveAuth(result.voter);
      } else {
        log('⚠️ Warning: No voter profile in response, fetching manually');
        // Fallback: fetch manually if not included
        const authResult = await authenticateEmail(STATE.user.email);
        if (authResult.success) {
          STATE.user = authResult.voter;
          saveAuth(authResult.voter);
        }
      }
      
      STATE.hasVoted = true;
      
      // Re-render with fresh data
      renderLogin();
      renderVoting();
      
      // Show coupon offer
      showCouponOffer();
    } else {
      throw new Error(result.message || 'Vote submission failed');
    }
  } catch (error) {
    log('Vote submission error:', error);
    overlay.innerHTML = `
      <div class="confirm-modal">
        <div class="error-message" style="margin-bottom: 1rem;">
          ${error.message || 'Failed to submit votes. Please try again.'}
        </div>
        <button class="btn" style="width: 100%;" onclick="closeOverlay()">Close</button>
      </div>
    `;
  }
};
    
    function showCouponOffer() {
      const overlay = document.getElementById('overlay');
      
      overlay.innerHTML = `
        <div class="coupon-modal">
          <div class="coupon-title">🎉 Thank You!</div>
          <p class="coupon-text">
            Get <strong style="color: #4ade80;">15% OFF</strong> FlexCheck this week!
          </p>
          <input type="email" class="coupon-input" id="coupon-email" 
                 placeholder="Enter email for coupon" value="${STATE.user?.email || ''}">
          <div class="coupon-buttons">
            <button class="btn-secondary" style="flex: 1;" onclick="skipCoupon()">No Thanks</button>
            <button class="btn" style="flex: 1;" onclick="sendCoupon()">Send Coupon</button>
          </div>
        </div>
      `;
    }
    
    window.sendCoupon = function() {
      const email = document.getElementById('coupon-email').value;
      
      // TODO: Call GAS to send coupon
      log('Coupon requested for:', email);
      
      const overlay = document.getElementById('overlay');
      overlay.innerHTML = `
        <div class="thanks-modal">
          <div class="thanks-title">Coupon Sent! ✉️</div>
          <p class="thanks-text">
            You will receive your coupon in email soon.
          </p>
          <p class="thanks-text">
            <strong style="color: #4ade80;">Thanks for voting!</strong>
          </p>
          <button class="btn" style="width: 100%; padding: 1rem;" onclick="closeAndShowResults()">
            Close
          </button>
        </div>
      `;
    };
    
    window.skipCoupon = function() {
      const overlay = document.getElementById('overlay');
      overlay.innerHTML = `
        <div class="thanks-modal">
          <div class="thanks-title">Thanks for Playing! 🎮</div>
          <button class="btn" style="width: 100%; padding: 1rem; margin-top: 1rem;" onclick="closeAndShowResults()">
            Close
          </button>
        </div>
      `;
    };
    
    window.closeAndShowResults = function() {
      closeOverlay();
      renderResults();
      document.getElementById('results-widget').classList.add('show');
      setTimeout(() => {
        document.getElementById('results-widget').scrollIntoView({ behavior: 'smooth' });
      }, 100);
    };
    
    window.scrollToResults = function() {
  const resultsWidget = document.getElementById('results-widget');
  if (resultsWidget) {
    resultsWidget.scrollIntoView({ behavior: 'smooth', block: 'start' });
  }
};
    
    window.showTimezoneConverter = function() {
      const overlay = document.getElementById('overlay');
      
      // Live stream time: Friday 7pm CT
      const streamTime = new Date('2025-01-10T19:00:00-06:00');
      
      // Get user's timezone
      const userTZ = Intl.DateTimeFormat().resolvedOptions().timeZone;
      const userTimeStr = streamTime.toLocaleTimeString('en-US', {
        timeZone: userTZ,
        hour: 'numeric',
        minute: '2-digit',
        hour12: true,
        timeZoneName: 'short'
      });
      
      const userDateStr = streamTime.toLocaleDateString('en-US', {
        timeZone: userTZ,
        weekday: 'long',
        month: 'long',
        day: 'numeric'
      });
      
      // Calculate time difference
      const now = new Date();
      const userOffset = -now.getTimezoneOffset();
      const ctOffset = -360;
      const diffHours = (userOffset - ctOffset) / 60;
      const diffStr = diffHours === 0 ? 'Same as CT' : 
                     diffHours > 0 ? `${diffHours} hours ahead of CT` :
                     `${Math.abs(diffHours)} hours behind CT`;
      
      overlay.innerHTML = `
        <div class="timezone-modal">
          <div class="timezone-title">🕐 Live Stream Time</div>
          
          <div class="timezone-info">
            <div class="timezone-row">
              <span class="timezone-label">Stream Time (CT):</span>
              <span class="timezone-value">Friday 7:00 PM</span>
            </div>
            <div class="timezone-row">
              <span class="timezone-label">Your Time:</span>
              <span class="timezone-value">${userTimeStr}</span>
            </div>
            <div class="timezone-row">
              <span class="timezone-label">Your Date:</span>
              <span class="timezone-value">${userDateStr}</span>
            </div>
            <div class="timezone-row">
              <span class="timezone-label">Your Timezone:</span>
              <span class="timezone-value">${userTZ.split('/')[1] || userTZ}</span>
            </div>
          </div>
          
          <p style="color: #8b909b; font-size: 0.85rem; text-align: center; margin: 1rem 0;">
            ${diffStr}
          </p>
          
          <button class="timezone-close" onclick="closeOverlay()">Got It!</button>
        </div>
      `;
      overlay.classList.add('show');
    };
    
    window.closeOverlay = function() {
      document.getElementById('overlay').classList.remove('show');
    };
    
    // ============================================
    // EMAIL VERIFICATION HANDLER
    // ============================================
async function handleEmailVerification(token) {
  const loginWidget = document.getElementById('login-widget');
  
  // Show loading state
  loginWidget.innerHTML = `
    <h3 class="login-title">FlexCheck Voting - Sign In</h3>
    <div class="loading" style="margin-top: 1rem;">
      <div class="spinner"></div>
      <p>Verifying your email...</p>
    </div>
  `;
  
  try {
    const result = await verifyEmailToken(token);
    
    if (result.success) {
      // Verification successful - clear token from URL first
      window.history.replaceState({}, document.title, window.location.pathname);
      
      log('Email verified successfully, auto-logging in...');
      
      // Auto-login by fetching updated voter profile
      try {
        const authResult = await authenticateEmail(result.email);
        
        if (authResult.success && authResult.voter.verified) {
          // Save authenticated user
          STATE.user = authResult.voter;
          saveAuth(authResult.voter);
          
          // Show success message briefly
          loginWidget.innerHTML = `
            <div class="pending-verification" style="background: rgba(74, 222, 128, 0.2); border-color: #4ade80; color: #4ade80;">
              ✅ Email verified successfully!<br>
              <small style="color: #8b909b; margin-top: 0.5rem; display: block;">
                Logging you in...
              </small>
            </div>
          `;
          
          // Wait a moment to show the message, then complete login
          setTimeout(() => {
            renderLogin();
            renderVoting();
            
            // Scroll to voting widget
            document.getElementById('voting-widget').scrollIntoView({ 
              behavior: 'smooth', 
              block: 'start' 
            });
          }, 1500);
          
        } else {
          throw new Error('Failed to retrieve verified account');
        }
      } catch (authError) {
        log('Auto-login failed:', authError);
        
        // Fallback: show manual login with email pre-filled
        loginWidget.innerHTML = `
          <h3 class="login-title">FlexCheck Voting - Sign In</h3>
          <div class="login-form">
            <input type="email" id="email-input" class="login-input" placeholder="your@email.com" value="${result.email || ''}">
            <button class="btn" onclick="handleLogin()">Sign In</button>
          </div>
          <div class="pending-verification" style="margin-top: 1rem; background: rgba(74, 222, 128, 0.2); border-color: #4ade80; color: #4ade80;">
            ✅ Email verified successfully! Please sign in above.
          </div>
        `;
      }
      
    } else {
      // Verification failed
      window.history.replaceState({}, document.title, window.location.pathname);
      
      loginWidget.innerHTML = `
        <h3 class="login-title">FlexCheck Voting - Sign In</h3>
        <div class="login-form">
          <input type="email" id="email-input" class="login-input" placeholder="your@email.com">
          <button class="btn" onclick="handleLogin()">Sign In</button>
        </div>
        <div class="error-message" style="margin-top: 1rem;">
          ❌ ${result.message || 'Verification failed. Please try again or request a new verification email.'}
        </div>
      `;
    }
  } catch (error) {
    log('Verification error:', error);
    window.history.replaceState({}, document.title, window.location.pathname);
    
    loginWidget.innerHTML = `
      <h3 class="login-title">FlexCheck Voting - Sign In</h3>
      <div class="login-form">
        <input type="email" id="email-input" class="login-input" placeholder="your@email.com">
        <button class="btn" onclick="handleLogin()">Sign In</button>
      </div>
      <div class="error-message" style="margin-top: 1rem;">
        ❌ Connection error during verification. Please try signing in or contact support.
      </div>
    `;
  }
}
    
    // ============================================
    // INITIALIZATION
    // ============================================
    async function init() {
  log('Initializing FlexCheck Voting System...');
  log('Dev Mode:', CONFIG.DEV_MODE);
  log('Endpoints:', {
    leaderboard: CONFIG.LEADERBOARD_URL,
    auth: CONFIG.AUTH_URL,
    voting: CONFIG.VOTING_URL
  });
  
  // Load auth from localStorage
  STATE.user = loadAuth();
  if (STATE.user) {
    log('User loaded from cache:', STATE.user.email);
    
    // ✅ Always refresh from server to get current vote status
    log('Checking server for current vote status...');
    try {
      const result = await authenticateEmail(STATE.user.email);
      if (result.success && result.voter) {
        STATE.user = result.voter;
        saveAuth(result.voter);
        log('User status refreshed from server');
      }
    } catch (error) {
      log('Failed to refresh user status, using cached data');
    }
  }
  
  // Load tier selection
  const savedTier = localStorage.getItem(CONFIG.TIER_KEY);
  if (savedTier && ['top', 'mid', 'low'].includes(savedTier)) {
    STATE.currentTier = savedTier;
  }
  
  // Render login
  renderLogin();
  
  // Check for verification token in URL
  const urlParams = new URLSearchParams(window.location.search);
  const token = urlParams.get('token');
  if (token) {
    log('Verification token found:', token);
    await handleEmailVerification(token);
  }
  
  // Fetch leaderboard data
  showLoading(document.getElementById('voting-widget'), 'Loading competitors...');
  
  try {
    const leaderboardData = await fetchLeaderboard();
    STATE.leaderboardData = leaderboardData;
    
    log('Leaderboard week key:', leaderboardData.weekKey);
    log('Voting window open:', leaderboardData.updating);
    log('Deadline:', leaderboardData.deadlineDisplay);
    
    // Extract top 3 from each tier
    STATE.competitors = {
      top: (leaderboardData.top3?.top || leaderboardData.tiers?.top || []).slice(0, 3),
      mid: (leaderboardData.top3?.mid || leaderboardData.tiers?.mid || []).slice(0, 3),
      low: (leaderboardData.top3?.low || leaderboardData.tiers?.low || []).slice(0, 3)
    };
    
    log('Competitors loaded:', STATE.competitors);
    
    if (STATE.competitors.top.length === 0) {
      showError('No competitors found for this week. Please check back later.');
      return;
    }
    
    // Render voting widget
    renderVoting();
    
    // ✅ If user has voted, automatically show results
    if (STATE.user && STATE.user.voted_top && STATE.user.voted_mid && STATE.user.voted_low) {
      log('User has already voted, showing results');
      renderResults();
      document.getElementById('results-widget').classList.add('show');
    }
  } catch (error) {
    console.error('Failed to load leaderboard:', error);
    showError('Failed to load competitors. Please refresh the page.');
  }
  
  log('Initialization complete');
}
    
    // Start the app
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', init);
    } else {
      init();
    }
  </script>
